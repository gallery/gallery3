<?php defined("SYSPATH") or die("No direct script access.");
/**
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2013 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
class Tag_Model_Test extends Unittest_TestCase {
  public function test_rename_merge_tag() {
    $name1 = Test::random_name();
    $name2 = Test::random_name();

    $album1 = Test::random_album();
    $album2 = Test::random_album();

    Tag::add($album1, $name1);
    Tag::add($album2, $name2);

    $tag1 = ORM::factory("Tag")->where("name", "=", $name1)->find();
    $tag2 = ORM::factory("Tag")->where("name", "=", $name2)->find();

    // Rename tag1 using tag2's name, effectively merging them
    $tag1->name = $name2;
    $tag1->save();

    $tag1->reload();
    $tag2->reload();

    // Tags should be merged; $tag2 should be deleted
    $this->assertEquals(2, $tag1->count);
    $this->assertTrue($tag1->has("items", $album1));
    $this->assertTrue($tag1->has("items", $album2));
    $this->assertFalse($tag2->loaded());
  }

  public function test_rename_merge_tag_with_same_items() {
    $name1 = Test::random_name();
    $name2 = Test::random_name();

    $album = Test::random_album();

    Tag::add($album, $name1);
    Tag::add($album, $name2);

    $tag1 = ORM::factory("Tag")->where("name", "=", $name1)->find();
    $tag2 = ORM::factory("Tag")->where("name", "=", $name2)->find();

    // Rename tag1 using tag2's name, effectively merging them
    $tag1->name = $name2;
    $tag1->save();

    $tag1->reload();
    $tag2->reload();

    // Tags should be merged; $tag2 should be deleted
    $this->assertEquals(1, $tag1->count);
    $this->assertTrue($tag1->has("items", $album));
    $this->assertFalse($tag2->loaded());
  }

  public function test_name_with_untrimmed_spaces() {
    $name = Test::random_name();
    $album = Test::random_album();
    Tag::add($album, $name);
    $tag = ORM::factory("Tag")->where("name", "=", $name)->find();

    try {
      $tag->name = "foo bar ";
      $tag->save();
      $this->assertTrue(false, "Shouldn't be able to save");
    } catch (ORM_Validation_Exception $e) {
      $errors = $e->errors();
      $this->assertEquals("no_untrimmed_spaces", $errors["name"][0]);
    }

    // This should work (has space, but not leading/trailing)
    $tag->name = "foo bar";
    $tag->save();
  }

  public function test_name_with_comma() {
    $name = Test::random_name();
    $album = Test::random_album();
    Tag::add($album, $name);
    $tag = ORM::factory("Tag")->where("name", "=", $name)->find();

    try {
      $tag->name = "foo, bar";
      $tag->save();
      $this->assertTrue(false, "Shouldn't be able to save");
    } catch (ORM_Validation_Exception $e) {
      $errors = $e->errors();
      $this->assertEquals("no_commas", $errors["name"][0]);
    }
  }

  public function test_slug_is_url_safe() {
    $name = Test::random_name();
    $album = Test::random_album();
    Tag::add($album, $name);
    $tag = ORM::factory("Tag")->where("name", "=", $name)->find();

    try {
      $tag->slug = "illegal chars! !@#@#$!@~";
      $tag->save();
      $this->assertTrue(false, "Shouldn't be able to save");
    } catch (ORM_Validation_Exception $e) {
      $errors = $e->errors();
      $this->assertEquals("not_url_safe", $errors["slug"][0]);
    }

    // This should work
    $tag->slug = "the_quick_brown_fox";
    $tag->save();
  }

  public function test_slug_is_autogenerated() {
    $name = Test::random_name();
    $album = Test::random_album();
    Tag::add($album, $name);
    $tag = ORM::factory("Tag")->where("name", "=", $name)->find();

    $this->assertEquals($name, $tag->slug);
  }

  public function test_slug_is_autogenerated_from_name_with_illegal_char() {
    $name = Test::random_name();
    $album = Test::random_album();
    Tag::add($album, $name . "!");
    $tag = ORM::factory("Tag")->where("name", "=", $name . "!")->find();

    $this->assertEquals($name, $tag->slug);
  }

  public function test_slug_is_autogenerated_from_name_with_all_illegal_chars() {
    $album = Test::random_album();
    Tag::add($album, "!");
    $tag = ORM::factory("Tag")->where("name", "=", "!")->find();

    // Test that slug starts with "tag" (may have suffix if conflicts from other tests)
    $this->assertEquals("tag", substr($tag->slug, 0, 3));
  }

  public function test_fix_conflict_when_slugs_identical() {
    $name1 = Test::random_name();
    $name2 = Test::random_name();

    $album1 = Test::random_album();
    $album2 = Test::random_album();

    Tag::add($album1, $name1);
    Tag::add($album2, $name2);

    $tag1 = ORM::factory("Tag")->where("name", "=", $name1)->find();
    $tag2 = ORM::factory("Tag")->where("name", "=", $name2)->find();

    $tag2->slug = $tag1->slug;
    $tag2->save();

    // tag2 has same slug as tag1 - conflict resolved by renaming with -01.
    $this->assertEquals("{$tag1->slug}-01", $tag2->slug);
  }

  public function test_slug_is_autogenerated_after_name_change() {
    $name = Test::random_name();
    $album = Test::random_album();
    Tag::add($album, $name);
    $tag = ORM::factory("Tag")->where("name", "=", $name)->find();

    $tag->name = "new$name";
    $tag->save();

    $this->assertEquals("new$name", $tag->slug);
  }

  public function test_slug_is_not_autogenerated_after_name_and_slug_change() {
    $name = Test::random_name();
    $album = Test::random_album();
    Tag::add($album, $name);
    $tag = ORM::factory("Tag")->where("name", "=", $name)->find();

    $tag->name = "new$name";
    $tag->slug = "nouveau$name";
    $tag->save();

    $this->assertEquals("nouveau$name", $tag->slug);
  }
}
